// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum NoiseLevel {
    SILENT
    LOW
    MEDIUM
    HIGH
    VERY_HIGH
}

enum PostStatus {
    OPEN
    CLOSED
}

enum PostRatingType {
    UPVOTE
    DOWNVOTE
}

model Post {
    id         Int        @id @default(autoincrement())
    object     String
    content    String     @db.Text
    noiseLevel NoiseLevel @default(MEDIUM)

    status PostStatus @default(OPEN)

    latitude  Float  @db.DoublePrecision
    longitude Float  @db.DoublePrecision
    address   String
    city      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    comments    Comment[]
    postRatings PostRating[]

    createdBy   User @relation(fields: [createdById], references: [id])
    createdById Int
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User @relation(fields: [createdById], references: [id])
    createdById Int

    post   Post @relation(fields: [postId], references: [id])
    postId Int
}

model PostRating {
    id         Int            @id @default(autoincrement())
    ratingType PostRatingType

    createdAt DateTime @default(now())

    post   Post @relation(fields: [postId], references: [id])
    postId Int

    createdBy   User @relation(fields: [createdById], references: [id])
    createdById Int
}

model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    points        Int       @default(0)

    accounts    Account[]
    sessions    Session[]
    posts       Post[]
    comments    Comment[]
    postRatings PostRating[]
}

// Necessary for Next auth
model Account {
    id                       Int     @id @default(autoincrement())
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int?

    userId Int
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime

    userId Int
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
